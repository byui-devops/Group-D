name: Release and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: true
        type: string
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      aws_session_token:
        description: 'AWS Session Token'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.aws_access_key_id || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ github.event.inputs.aws_session_token || secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
      - name: Debug Terraform Output
        run: echo "Instance IP:$(terraform -chdir=./terraform output -raw instance_public_ip 2>/dev/null)"
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: |
          docker build -t anhmeo/group-d:latest -f Dockerfile .
      - name: Push Docker Image
        run: docker push anhmeo/group-d:latest
      - name: Deploy to EC2
        run: |
          # Extract the IP and filter out debug output
          INSTANCE_IP=$(terraform -chdir=./terraform output -raw instance_public_ip 2>/dev/null | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$INSTANCE_IP" ]; then
            echo "Error: Failed to extract instance_public_ip"
            exit 1
          fi
          echo "Deploying to IP: $INSTANCE_IP"
          # Write SSH key
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          # Pull Docker image
          docker pull ***/group-d:latest
          # Wait for instance to be reachable
          for i in {1..60}; do  # Increased to 60 attempts (10 minutes)
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i key.pem ec2-user@$INSTANCE_IP exit 0 2>/dev/null; then
              echo "SSH port open"
              break
            fi
            echo "Waiting for instance $INSTANCE_IP... ($i/60)"
            sleep 10
          done
          # Deploy via SSH with keep-alive and logging
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -i key.pem ec2-user@$INSTANCE_IP << 'EOF'
            set -e
            echo "Starting deployment on $(hostname) at $(date)"
            # Install Docker and netcat if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker net-tools  # Added net-tools for nc
              sudo service docker start
              sudo usermod -aG docker ec2-user
              newgrp docker
            else
              echo "Docker is already installed"
            fi
            # Verify Docker daemon
            echo "Checking Docker daemon..."
            if ! docker info &> /dev/null; then
              echo "Error: Cannot connect to Docker daemon"
              exit 1
            fi
            echo "Stopping and removing old CashCat container..."
            docker stop CashCat || true
            docker rm CashCat || true
            echo "Pulling and running new container..."
            docker run -d --name CashCat -p 80:8000 ***/group-d:latest
            # Check container logs
            echo "Container logs:"
            docker logs CashCat
            # Wait for port 80 to be available
            echo "Waiting for port 80..."
            for i in {1..30}; do
              if nc -z 127.0.0.1 80; then
                echo "Port 80 is open"
                break
              fi
              echo "Waiting for port 80... ($i/30)"
              sleep 5
            done
            echo "Deployment complete at $(date)"
          EOF
        working-directory: ${{ github.workspace }}
